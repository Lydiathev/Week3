means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean{y[,i])
}
means
}
cube<- function(x,n){
x^3
}
cube(3)
x<-1:10
is(x>5){
x<-0
}
x<-1:10
if(x>5){
x<-0
}
install.packages("KernSmooth")
available.packages(KernSmooth)
library(KernSmooth)
library(swirl)
install.packages("swirl")
library(swirl)
getwd()
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install.packages("magrittr")
library(swirl)
install_from_swirl("R Programming")
myapp=oauth_app("github", key="04be6b6973a2a1e80a16",secret="6b60833800a1f010d73f56d5a6449aee00e311a8")
myapp=oath_app("github", key="04be6b6973a2a1e80a16",secret="6b60833800a1f010d73f56d5a6449aee00e311a8")
library(httr)
myapp=oath_app("github", key="04be6b6973a2a1e80a16",secret="6b60833800a1f010d73f56d5a6449aee00e311a8")
install.packages(httr)
install.packages("httr")
library(httr)
myapp=oath_app("github", key="04be6b6973a2a1e80a16",secret="6b60833800a1f010d73f56d5a6449aee00e311a8")
myapp=oauth_app("github", key="04be6b6973a2a1e80a16",secret="6b60833800a1f010d73f56d5a6449aee00e311a8")
sig=sign_oauth1.0(myapp,token = "week2", token_secret = "a42ea6f2f41c7d259f61b141b3492b178b769906")
con=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
htmlCode=readLines(con)
close(con)
htmlCode
htmlCode[1:9]
library(XML)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "
html<-htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td{@col=4",xmlValue)
htmlCode
head(htmlCode)
sum($4)
sum($ssta)
sum(htmlCode$ssta)
dataset_url<-"http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url,"diet_data.zip")
unzip("diet_data.zip",exdir="diet_data")
list.files("diet_data")
andy<-read.csv("diet_data/Andy.csv")
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1,"Weight"]
any[30,"Weight"]
andy[30,"Weight"]
andy[which(andy$Day==30),"Weight"]
andy[which(andy[,"Day"]==30),"Weight"]
andy_start<-andy[1,"Weight"]
andy_end<-andy[30,"Weight"]
andy_loss<-andy_start-andy_end
andy_loss
files<-list.files("diet_data")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
head(read.csv(files[3]))
files_full<-list.files("diet_data",full.names = TRUE)
files_full
head(read.csv(files_full[3]))
andy_davide<-rbind(andy,read.csv(files_full[2]))
head(andy_davide)
tail(andy_davide)
day_25<-andy_davide[which(andy_davide$Day==25),]
day_25
for (i in 1:5){print(i)}
dat<- rbind(dat, read.csv(files_full[i]))
}
dat<-data.frame()
for (i in 1:5) {
dat<- rbind(dat, read.csv(files_full[i]))
}
dat<-data.frame()
for (i in 1:5) {
dat<- rbind(dat, read.csv(files_full[i]))
}
str(dat)
for(i in 1:5) {
dat2<-data.frame()
dat2<-rbind(dat2, read.csv(files_full[i]))
}
for i
str(dat2)
head(dat2)
median(dat$Weight)
median(dat$Weight,na.rm=TRUE)
dat_30<-dat[which(dat[,"Day"]==30),]
dat_30
meadian(dat_30$Weight)
median(dat_30$Weight)
weightmedian<-function(directory, day) {
files_list<-list.files(directory,full.names=True)
dat<-data.frame()
for(i in 1:5) {
dat<rbind(dat, read.csv(files_list[i]))
}
dat_subset<-dat[which(dat[,"day"]==day),]
median(dat_subset[,"Weight"],na.rm=TRUE)
}
weightmedian<-function(directory, day)
weightmedian(directory="diet_data", day=20)
weightmedian(directory="diet_data", day=20)
weightmedian<-function(directory, day) {
files_list<-list.files(directory,full.names=True)
dat<-data.frame()
for(i in 1:5) {
dat<-rbind(dat, read.csv(files_list[i]))
}
dat_subset<-dat[which(dat[,"day"]==day),]
median(dat_subset[,"Weight"],na.rm=TRUE)
}
weightmedian(directory="diet_data", day=20)
weightmedian<-function(directory, day) {
files_list<-list.files(directory,full.names=True)
dat<-data.frame()
for(i in 1:5) {
dat<-rbind(dat, read.csv(files_list[i]))
}
dat_subset<-dat[which(dat[,"Day"]==day),]
median(dat_subset[,"Weight"],na.rm=TRUE)
}
weightmedian(directory="diet_data", day=20)
weightmedian<-function(directory, day) {
files_list<-list.files(directory,full.names=TRUE)
dat<-data.frame()
for(i in 1:5) {
dat<-rbind(dat, read.csv(files_list[i]))
}
dat_subset<-dat[which(dat[,"Day"]==day),]
median(dat_subset[,"Weight"],na.rm=TRUE)
}
weightmedian(directory="diet_data", day=20)
weightmedian(directory="diet_data", 4)
weightmedian(directory="diet_data", 17)
library(datasets)
data("iris")
?iris
dim(iris)
head(iris)
virginica(iris$sp==Virginica)
iris$Species==Virginica
iris$Species=="Virginica"
iris
virginica<-(iris$Species==virginica)
virginica<-(iris$Species=="virginica")
mean(virginica)
mean(iris$Sepal.Length, virginica)
mean(virginica$Sepal.Length)
dat_V<-data.frame()
library(datasets)
data(iris)
mean_sepallength<-mean(iris$Sepal.Length)
virginica<-iris$Species=="virginica"
mean_sepallength(virginica)
mean_sepallength
mean_sepallength(virginica)
mean_sepallength("virginica")
virginica
dat<-data.frame()
?dat
??dat
virginica<-(dat, iris$Species=="virginica")
?data.frame
virginica<-[iris$Species=="virginica"]
virginica<-iris[iris$Species=="virginica"]
virginica<-data.frame[iris$Species=="virginica"]
virginica<-data.frame[iris$Species=="virginica"]
virginica<-iris[which(iris$Species=="virginica")]
virginica<-iris[which(iris$Species=='virginica')]
virginica<-iris[which(iris$Species=='virginica'),]
mean_sepallength(virginica)
mean_sepallength
virginica(mean_sepallength)
library(datasets)
data(iris)
head(iris)
dim(iris)
list(iris$Species)
levels(iris$Species)
Virginica<-subset(iris, iris$sp=="virginica")
Virginica
Virginica<-subset(iris, (iris$sp=="virginica")
Virginica<-subset(iris, (iris$sp=="virginica"))
Virginica
Virginica<-data.frame(iris, (iris$sp=="virginica"))
Virginica<-data.frame(iris, iris$sp=="virginica")
iris(iris$Species=="virginica")
virginica<-iris$Species=="virginica"
virginica
virginica<-(iris$Species=="virginica", drop=FALSE)
virginica<-iris[which(iris$Species=="virginica"),]
virginica
mean(virginica$Sepal.Length)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
colMeans(iris)
rowMeans(iris[1:4])
library(datasets)
data("mtcars")
?mtcars
head(mtcars)
lapply(mtcars,mean)
split(mtcars,mtcars$cyl)
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
4Cyl<-mtcars[which(mtcars$cy=="4")]
4Cyl<-mtcars[which(mtcars$cyl=="4")]
four_cyl<-mtcars[which(mtcars$cyl="5")]
four_cyl<-mtcars[which(mtcars$cyl="4")]
four_cyl<-mtcars[which(mtcars$cyl="4"),]
4cyl<-mtcars[which(mtcars$cyl="4"),]
four<-mtcars[which(mtcars$cyl="4"),]
mtcars
four<-mtcars[which(mtcars$cyl="4"),]
four<-mtcars[which(mtcars$cyl=="4"),]
eight<-mtcars[which(mtcars$cyl=="8"),]
mean_four<-mean(four$hp)
mean_eight<-mean(eight$hp)
mean_four-mean_eight
mean_eight-mean_four
mean_four
mean_eight
debug(ls)
ls
librar(iris)
library(iris)
datasets(iris)
library(datasets)
data("iris")
data("iris")
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=5
5!=7
5!=7
5!==7
5!(==)7
!5==7
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FLASE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function")
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(sd,c(1.4,3.6,7.9,8.8)))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},)
evaluate(function(x){x+1},6)
evaluate(func(x),c(8,4,0))
evaluate(func(x){x*2},c(8,4,0))
evaluate(function(x){x*2},c(8,4,0))
evaluate((x){x*2},c(8,4,0))
evaluate(function(x){x*2},c(8,4,0))
evaluate(function(x){x*2},c[1])
evaluate(function(x){x*2},c(8,4,0))
evaluate(function(x){x*2},c(8,,))
evaluate(function(x){x*2},c(8,4,0))
evaluate[1](function(x){x*2},c(8,4,0))
info()
skip()
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(length(x){x[3]}, c(8, 4, 0))
evaluate(function(x){length(x[3])}, c(8, 4, 0))
evaluate(function(x){length(x)}, c(8, 4, 0))
skip()
?paste
paste("Programming", "is", "fun!")
submit()
telegram(Hello)
telegram("hello")
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs("London","today", "working hard")
submit()
##Step 1
##Read test data
test<-read.table("test/x_test.txt")
## Read train data
train<-read.table("train/x_train.txt")
##Create empty data frame for combined test and train data
all_data<-data.frame()
##Combine test and train data in empty data frame
all_data<-rbind(all_data, test,train)
##Read test labels
test_label<-read.table("test/y_test.txt")
##Read train labels
train_label<-read.table("train/y_train.txt")
##Create empty data frame for combined test and train labels
all_data_labels<data.frame()
##Combine test and train labels
all_data_labels<-rbind(all_data_labels, test_label, train_label)
##Read test subject
test_subject<-read.table("test/subject_test.txt")
##Read train subject
train_subject<-read.table("train/subject_train.txt")
##Create empty data frame for combined test and train subjects
all_data_subjects<-data.frame()
##Combine test and train subjects
all_data_subjects<-rbind(all_data_subjects, test_subject,train_subject)
names(all_data_subjects)<-"subject"
##Read features attributes
features<-read.table("features.txt", col.names = c("ID","features"))
##Read activity labels
activity<-read.table("activity_labels.txt",col.names = c("ID","activity"))
##Step2
##create function that can be used to filter mean and sd data
mean_sd<-function(){
features
features_mean_sd<=grep('mean\\(\\)|sd\\(\\)',features$features)
data_mean_sd<-all_data[,features_mean_sd]
headings(data_mean_sd)<-features[features$ID %in% features_mean_sd]
data_mean_sd
}
##Step3 & 4
##Assign dataset with activity labels and variable names
new_dataset<-data.frame()
new_dataset<-cbind(all_data_subjects, all_data, activity)
write.table(new_data, "new_data.txt")
##Step 5
##Create a new tidy dataset with the average of each variable for each activity and subject
setwd("C:/R/Week3")
##Step 1
##Read test data
test<-read.table("test/x_test.txt")
## Read train data
train<-read.table("train/x_train.txt")
##Create empty data frame for combined test and train data
all_data<-data.frame()
##Combine test and train data in empty data frame
all_data<-rbind(all_data, test,train)
##Read test labels
test_label<-read.table("test/y_test.txt")
##Read train labels
train_label<-read.table("train/y_train.txt")
##Create empty data frame for combined test and train labels
all_data_labels<data.frame()
##Combine test and train labels
all_data_labels<-rbind(all_data_labels, test_label, train_label)
##Read test subject
test_subject<-read.table("test/subject_test.txt")
##Read train subject
train_subject<-read.table("train/subject_train.txt")
##Create empty data frame for combined test and train subjects
all_data_subjects<-data.frame()
##Combine test and train subjects
all_data_subjects<-rbind(all_data_subjects, test_subject,train_subject)
names(all_data_subjects)<-"subject"
##Read features attributes
features<-read.table("features.txt", col.names = c("ID","features"))
##Read activity labels
activity<-read.table("activity_labels.txt",col.names = c("ID","activity"))
##Step2
##create function that can be used to filter mean and sd data
mean_sd<-function(){
features
features_mean_sd<=grep('mean\\(\\)|sd\\(\\)',features$features)
data_mean_sd<-all_data[,features_mean_sd]
headings(data_mean_sd)<-features[features$ID %in% features_mean_sd]
data_mean_sd
}
##Step3 & 4
##Assign dataset with activity labels and variable names
new_dataset<-data.frame()
new_dataset<-cbind(all_data_subjects, all_data, activity)
write.table(new_data, "new_data.txt")
##Step 5
##Create a new tidy dataset with the average of each variable for each activity and subject
##Step3 & 4
##Assign dataset with activity labels and variable names
new_dataset<-data.frame()
new_dataset<-cbind(all_data_subjects, all_data, activity)
write.table(new_dataset, "new_data.txt")
##Step 5
##Create a new tidy dataset with the average of each variable for each activity and subject
##Step 1
##Read test data
test<-read.table("test/x_test.txt")
## Read train data
train<-read.table("train/x_train.txt")
##Create empty data frame for combined test and train data
all_data<-data.frame()
##Combine test and train data in empty data frame
all_data<-rbind(all_data, test,train)
##Read test labels
test_label<-read.table("test/y_test.txt")
##Read train labels
train_label<-read.table("train/y_train.txt")
##Create empty data frame for combined test and train labels
all_data_labels<-data.frame()
##Combine test and train labels
all_data_labels<-rbind(all_data_labels, test_label, train_label)
##Read test subject
test_subject<-read.table("test/subject_test.txt")
##Read train subject
train_subject<-read.table("train/subject_train.txt")
##Create empty data frame for combined test and train subjects
all_data_subjects<-data.frame()
##Combine test and train subjects
all_data_subjects<-rbind(all_data_subjects, test_subject,train_subject)
names(all_data_subjects)<-"subject"
##Read features attributes
features<-read.table("features.txt", col.names = c("ID","features"))
##Read activity labels
activity<-read.table("activity_labels.txt",col.names = c("ID","activity"))
##Step2
##create function that can be used to filter mean and sd data
mean_sd<-function(){
features
features_mean_sd<=grep('mean\\(\\)|sd\\(\\)',features$features)
data_mean_sd<-all_data[,features_mean_sd]
headings(data_mean_sd)<-features[features$ID %in% features_mean_sd]
data_mean_sd
}
##Step3 & 4
##Assign dataset with activity labels and variable names
new_dataset<-data.frame()
new_dataset<-cbind(all_data_subjects, all_data, activity)
write.table(new_dataset, "new_data.txt")
##Step 5
##Create a new tidy dataset with the average of each variable for each activity and subject
##Step3 & 4
##Assign dataset with activity labels and variable names
new_dataset<-data.frame()
new_dataset<-cbind(new_dataset, all_data_subjects, all_data, activity)
write.table(new_dataset, "new_data.txt")
##Step 5
##Create a new tidy dataset with the average of each variable for each activity and subject
##Step3 & 4
##Assign dataset with activity labels and variable names
new_dataset<-data.frame()
new_dataset<-cbind(new_dataset, all_data_subjects, all_data, activity)
write.table(new_dataset, "new_data.txt")
##Step 5
##Create a new tidy dataset with the average of each variable for each activity and subject
dim(new_dataset)
dim(all_data_subjects)
dim(all_data)
dim(activity)
new_dataset<-data.frame()
new_dataset<-cbind(new_dataset, all_data_subjects, all_data)
new_dataset<-rbind(new_dataset, all_data_subjects, all_data)
new_dataset<-merge(all_data_labels, activity, by="ID")
new_dataset<-merge(all_data_labels, activity, by="activity$ID")
new_dataset<-merge(all_data_labels, activity, by="ID")$mean_sd
new_dataset<-merge(all_data_labels, activity, by="ID")$data_mean_sd
names(all_data_subjects)<-"subject"
new_data<-cbind(all_data_subjects,activity[,1],data_mean_sd)
new_data<-cbind(all_data_subjects,activity[,1],mean_sd)
new_data<-cbind(all_data_subjects,activity,mean_sd)
